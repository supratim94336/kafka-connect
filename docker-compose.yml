services:
  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:7.3.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 1
    ports:
      - 2181:2181
    networks:
      - kc-test

  broker:
    image: confluentinc/cp-enterprise-kafka:7.3.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_PORT: 29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:29092,EXTERNAL://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: 'broker'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:9092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - kc-test

  connect:
    container_name: connect
    image: debezium/connect:1.4
    depends_on:
      - zookeeper
      - broker
      - schema_registry
    ports:
      - 8083:8083
    environment:
      BOOTSTRAP_SERVERS: 'broker:29092'
      REST_ADVERTISED_HOST_NAME: connect
      GROUP_ID: compose-connect-group
      CONFIG_STORAGE_TOPIC: docker-connect-configs
      OFFSET_STORAGE_TOPIC: docker-connect-offsets
      STATUS_STORAGE_TOPIC: docker-connect-status
      KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema_registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema_registry:8081
    volumes:
      - connect_data:/etc/kafka-connect/jars
      - ./jars/kafka-connect-iceberg-sink-0.4.0.jar:/kafka/connect/kafka-connect-iceberg-sink-0.4.0.jar
    networks:
      - kc-test

  schema_registry:
    image: confluentinc/cp-schema-registry:7.3.1
    hostname: schema_registry
    container_name: schema_registry
    depends_on:
      - zookeeper
      - broker
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema_registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker:29092
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: GET,POST,PUT,OPTIONS
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - kc-test

  postgres:
    image: postgres:15.5
    container_name: postgres
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d food"]
      interval: 2s
      timeout: 1s
      retries: 12
    environment:
      POSTGRES_DB: food
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - 5435:5432
    networks:
      - kc-test
    volumes:
      - ./postgres/scripts:/docker-entrypoint-initdb.d/
      - pg_data:/var/lib/postgresql/data
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"

  localstack:
    container_name: localstack
    image: localstack/localstack:1.0.4
    environment:
      - SERVICES=s3
      - EDGE_PORT=4566
      - DEFAULT_REGION=eu-central-1
      - DEBUG=1
      - AWS_ACCESS_KEY_ID=localstack
      - AWS_SECRET_ACCESS_KEY=localstack
    ports:
      - "4566:4566"
    networks:
      - kc-test

  nessie:
    image: projectnessie/nessie:latest
    container_name: nessie
    ports:
      - "19120:19120"
    networks:
      - kc-test

volumes:
  connect_data:
  pg_data:

networks:
  kc-test:
    driver: bridge
    name: kc-test
